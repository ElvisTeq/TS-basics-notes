9.

------------------------------------- html 5

- Create initial HTML file skeleton

* added <script src="app.js" defer></script>

- Created [app.ts] when "tsc" will compile into "app.js"

------------------------------------- npm init

------------------------------------- npm i --save-dev lite-server

- tool to open out app in web

* "start": "lite-server" added to "package.json" scripts

11.

Core Types of TS

- number, string, boolean

15.

- The initial value of a variable becomes the default TYPE in TS

16.

-------------------------------------- : {}

- Object type
- Types can be nested

18.

- Array types

-------------------------------------- : string[]
-------------------------------------- : number[]
-------------------------------------- : boolean[]

19.

- Tuple

-------------------------------------- : { role: [type, type] }

- To explicitly assign LENGTH & TYPE position in array
- .push() will break the rule

20.

- Enum

-------------------------------------- enum Role { ANYTHING, ANYTHING, ANYTHING };

- Creating a Enum
- To assign labels into INDEX NUMBER
- Labels values can be ANYTHING "numbers will automatically be assign +1 to the previous one"

21.

- Any 

-------------------------------------- any, any[]

- TS for ANYTHING
- AVOID USING

22.

- Union Types

-------------------------------------- : number | string

- To tell TS to expect 2 types
- can add as many types as needed

23.

- Literal Types

- To add a extra parameter to a function for extra validation

24.

- Type Aliases / Custom Types

-------------------------------------- type ANYTHING = number | string

- To store multiple types in a Custom Type (to reduce code)

25. 

- Type Aliases & Object Types

-------------------------------------- type User = { name: string, age: number }
-------------------------------------- const u1: User = { name: 'Elvis', age: 30 }

- To create Object Aliases Type

26.

- Function Return Types & Void

-------------------------------------- function add(n1; number, n2: number): number {}

- To tell TS what type a function to return

-------------------------------------- Void type

- When function does not return anything

-------------------------------------- undefine type

- can be used for functions and variables too

27.

- Function Type

-------------------------------------- let ANYTHING: Function;

- TS for function

-------------------------------------- let ANYTHING: (a: number, b: number) => number;

- TS for a specified function type

28.

- Function Type + Callbacks

-------------------------------------- let ANYTHING: (a:number, b: number, cb: (num: number) => void) {}

- Adding callback 

29.

- unkown Type

-------------------------------------- let ANYTHING: unknown;

- Can be anything, but cannot be assigned to another specified TYPE
- Better than "any" TYPE
- can use "if" statement to be assigned to another specified TYPE